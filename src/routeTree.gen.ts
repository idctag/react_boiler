/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteRouteImport } from './routes/_public/route'
import { Route as DashboardRouteRouteImport } from './routes/_dashboard/route'
import { Route as DashboardIndexRouteImport } from './routes/_dashboard/index'
import { Route as DashboardPostsRouteRouteImport } from './routes/_dashboard/posts/route'
import { Route as DashboardAboutRouteRouteImport } from './routes/_dashboard/about/route'
import { Route as PublicLoginIndexRouteImport } from './routes/_public/login/index'
import { Route as DashboardPostsIndexRouteImport } from './routes/_dashboard/posts/index'
import { Route as DashboardAboutIndexRouteImport } from './routes/_dashboard/about/index'
import { Route as DashboardPostsPostIdRouteRouteImport } from './routes/_dashboard/posts/$postId/route'
import { Route as DashboardPostsPostIdIndexRouteImport } from './routes/_dashboard/posts/$postId/index'

const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardPostsRouteRoute = DashboardPostsRouteRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardAboutRouteRoute = DashboardAboutRouteRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const PublicLoginIndexRoute = PublicLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => PublicRouteRoute,
} as any)
const DashboardPostsIndexRoute = DashboardPostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardPostsRouteRoute,
} as any)
const DashboardAboutIndexRoute = DashboardAboutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardAboutRouteRoute,
} as any)
const DashboardPostsPostIdRouteRoute =
  DashboardPostsPostIdRouteRouteImport.update({
    id: '/$postId',
    path: '/$postId',
    getParentRoute: () => DashboardPostsRouteRoute,
  } as any)
const DashboardPostsPostIdIndexRoute =
  DashboardPostsPostIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => DashboardPostsPostIdRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/about': typeof DashboardAboutRouteRouteWithChildren
  '/posts': typeof DashboardPostsRouteRouteWithChildren
  '/': typeof DashboardIndexRoute
  '/posts/$postId': typeof DashboardPostsPostIdRouteRouteWithChildren
  '/about/': typeof DashboardAboutIndexRoute
  '/posts/': typeof DashboardPostsIndexRoute
  '/login': typeof PublicLoginIndexRoute
  '/posts/$postId/': typeof DashboardPostsPostIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof DashboardIndexRoute
  '/about': typeof DashboardAboutIndexRoute
  '/posts': typeof DashboardPostsIndexRoute
  '/login': typeof PublicLoginIndexRoute
  '/posts/$postId': typeof DashboardPostsPostIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_dashboard': typeof DashboardRouteRouteWithChildren
  '/_public': typeof PublicRouteRouteWithChildren
  '/_dashboard/about': typeof DashboardAboutRouteRouteWithChildren
  '/_dashboard/posts': typeof DashboardPostsRouteRouteWithChildren
  '/_dashboard/': typeof DashboardIndexRoute
  '/_dashboard/posts/$postId': typeof DashboardPostsPostIdRouteRouteWithChildren
  '/_dashboard/about/': typeof DashboardAboutIndexRoute
  '/_dashboard/posts/': typeof DashboardPostsIndexRoute
  '/_public/login/': typeof PublicLoginIndexRoute
  '/_dashboard/posts/$postId/': typeof DashboardPostsPostIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/about'
    | '/posts'
    | '/'
    | '/posts/$postId'
    | '/about/'
    | '/posts/'
    | '/login'
    | '/posts/$postId/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/posts' | '/login' | '/posts/$postId'
  id:
    | '__root__'
    | '/_dashboard'
    | '/_public'
    | '/_dashboard/about'
    | '/_dashboard/posts'
    | '/_dashboard/'
    | '/_dashboard/posts/$postId'
    | '/_dashboard/about/'
    | '/_dashboard/posts/'
    | '/_public/login/'
    | '/_dashboard/posts/$postId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/posts': {
      id: '/_dashboard/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof DashboardPostsRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/about': {
      id: '/_dashboard/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof DashboardAboutRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_public/login/': {
      id: '/_public/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginIndexRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_dashboard/posts/': {
      id: '/_dashboard/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof DashboardPostsIndexRouteImport
      parentRoute: typeof DashboardPostsRouteRoute
    }
    '/_dashboard/about/': {
      id: '/_dashboard/about/'
      path: '/'
      fullPath: '/about/'
      preLoaderRoute: typeof DashboardAboutIndexRouteImport
      parentRoute: typeof DashboardAboutRouteRoute
    }
    '/_dashboard/posts/$postId': {
      id: '/_dashboard/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof DashboardPostsPostIdRouteRouteImport
      parentRoute: typeof DashboardPostsRouteRoute
    }
    '/_dashboard/posts/$postId/': {
      id: '/_dashboard/posts/$postId/'
      path: '/'
      fullPath: '/posts/$postId/'
      preLoaderRoute: typeof DashboardPostsPostIdIndexRouteImport
      parentRoute: typeof DashboardPostsPostIdRouteRoute
    }
  }
}

interface DashboardAboutRouteRouteChildren {
  DashboardAboutIndexRoute: typeof DashboardAboutIndexRoute
}

const DashboardAboutRouteRouteChildren: DashboardAboutRouteRouteChildren = {
  DashboardAboutIndexRoute: DashboardAboutIndexRoute,
}

const DashboardAboutRouteRouteWithChildren =
  DashboardAboutRouteRoute._addFileChildren(DashboardAboutRouteRouteChildren)

interface DashboardPostsPostIdRouteRouteChildren {
  DashboardPostsPostIdIndexRoute: typeof DashboardPostsPostIdIndexRoute
}

const DashboardPostsPostIdRouteRouteChildren: DashboardPostsPostIdRouteRouteChildren =
  {
    DashboardPostsPostIdIndexRoute: DashboardPostsPostIdIndexRoute,
  }

const DashboardPostsPostIdRouteRouteWithChildren =
  DashboardPostsPostIdRouteRoute._addFileChildren(
    DashboardPostsPostIdRouteRouteChildren,
  )

interface DashboardPostsRouteRouteChildren {
  DashboardPostsPostIdRouteRoute: typeof DashboardPostsPostIdRouteRouteWithChildren
  DashboardPostsIndexRoute: typeof DashboardPostsIndexRoute
}

const DashboardPostsRouteRouteChildren: DashboardPostsRouteRouteChildren = {
  DashboardPostsPostIdRouteRoute: DashboardPostsPostIdRouteRouteWithChildren,
  DashboardPostsIndexRoute: DashboardPostsIndexRoute,
}

const DashboardPostsRouteRouteWithChildren =
  DashboardPostsRouteRoute._addFileChildren(DashboardPostsRouteRouteChildren)

interface DashboardRouteRouteChildren {
  DashboardAboutRouteRoute: typeof DashboardAboutRouteRouteWithChildren
  DashboardPostsRouteRoute: typeof DashboardPostsRouteRouteWithChildren
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardAboutRouteRoute: DashboardAboutRouteRouteWithChildren,
  DashboardPostsRouteRoute: DashboardPostsRouteRouteWithChildren,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

interface PublicRouteRouteChildren {
  PublicLoginIndexRoute: typeof PublicLoginIndexRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicLoginIndexRoute: PublicLoginIndexRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  PublicRouteRoute: PublicRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
